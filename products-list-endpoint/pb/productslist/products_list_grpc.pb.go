// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package productslist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProductsListServiceClient is the client API for ProductsListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsListServiceClient interface {
	// ListProducts is responsible for returning a list of all products with discounts
	// applied for a given user, if an identifier is passed
	ListProducts(ctx context.Context, in *ProductsListRequest, opts ...grpc.CallOption) (ProductsListService_ListProductsClient, error)
}

type productsListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsListServiceClient(cc grpc.ClientConnInterface) ProductsListServiceClient {
	return &productsListServiceClient{cc}
}

var productsListServiceListProductsStreamDesc = &grpc.StreamDesc{
	StreamName:    "ListProducts",
	ServerStreams: true,
}

func (c *productsListServiceClient) ListProducts(ctx context.Context, in *ProductsListRequest, opts ...grpc.CallOption) (ProductsListService_ListProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, productsListServiceListProductsStreamDesc, "/productslist.ProductsListService/ListProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &productsListServiceListProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductsListService_ListProductsClient interface {
	Recv() (*ProductsListResponse, error)
	grpc.ClientStream
}

type productsListServiceListProductsClient struct {
	grpc.ClientStream
}

func (x *productsListServiceListProductsClient) Recv() (*ProductsListResponse, error) {
	m := new(ProductsListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductsListServiceService is the service API for ProductsListService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterProductsListServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ProductsListServiceService struct {
	// ListProducts is responsible for returning a list of all products with discounts
	// applied for a given user, if an identifier is passed
	ListProducts func(*ProductsListRequest, ProductsListService_ListProductsServer) error
}

func (s *ProductsListServiceService) listProducts(_ interface{}, stream grpc.ServerStream) error {
	m := new(ProductsListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.ListProducts(m, &productsListServiceListProductsServer{stream})
}

type ProductsListService_ListProductsServer interface {
	Send(*ProductsListResponse) error
	grpc.ServerStream
}

type productsListServiceListProductsServer struct {
	grpc.ServerStream
}

func (x *productsListServiceListProductsServer) Send(m *ProductsListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterProductsListServiceService registers a service implementation with a gRPC server.
func RegisterProductsListServiceService(s grpc.ServiceRegistrar, srv *ProductsListServiceService) {
	srvCopy := *srv
	if srvCopy.ListProducts == nil {
		srvCopy.ListProducts = func(*ProductsListRequest, ProductsListService_ListProductsServer) error {
			return status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "productslist.ProductsListService",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "ListProducts",
				Handler:       srvCopy.listProducts,
				ServerStreams: true,
			},
		},
		Metadata: "protobuf/proto/productslist/products_list.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewProductsListServiceService creates a new ProductsListServiceService containing the
// implemented methods of the ProductsListService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewProductsListServiceService(s interface{}) *ProductsListServiceService {
	ns := &ProductsListServiceService{}
	if h, ok := s.(interface {
		ListProducts(*ProductsListRequest, ProductsListService_ListProductsServer) error
	}); ok {
		ns.ListProducts = h.ListProducts
	}
	return ns
}

// UnstableProductsListServiceService is the service API for ProductsListService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableProductsListServiceService interface {
	// ListProducts is responsible for returning a list of all products with discounts
	// applied for a given user, if an identifier is passed
	ListProducts(*ProductsListRequest, ProductsListService_ListProductsServer) error
}
